{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["const PT_PER_PX = 1;\nconst PT_PER_REM = 12;\n\nexport function round(value: number) {\n  return Math.round(value * 1e6) / 1e6;\n}\n\nexport function isNumeric(value: string) {\n  if (value.startsWith(\".\")) {\n    value = `0${value}`;\n  }\n  return Number(value).toString() === value;\n}\n\nexport function capitalize(string: string) {\n  return `${string.charAt(0).toUpperCase()}${string.slice(1).toLowerCase()}`;\n}\n\nexport function rem(value: number) {\n  return round(PT_PER_REM * value);\n}\n\nexport function px(value: number) {\n  return round(PT_PER_PX * value);\n}\n","import resolveConfig from \"tailwindcss/resolveConfig\";\nimport type { Config as TailwindConfig } from \"tailwindcss/types\";\nimport { capitalize, isNumeric, px, rem } from \"./utils\";\n\ntype StyleSheet = Record<string, string | number>;\n\nconst exactUtilities: Record<string, StyleSheet> = {\n  // Layout\n  block: { display: \"block\" },\n  \"inline-block\": { display: \"inline-block\" },\n  inline: { display: \"inline\" },\n  flex: { display: \"flex\" },\n  \"inline-flex\": { display: \"inline-flex\" },\n  hidden: { display: \"none\" },\n  \"object-contain\": { objectFit: \"contain\" },\n  \"object-cover\": { objectFit: \"cover\" },\n  \"object-fill\": { objectFit: \"fill\" },\n  \"object-none\": { objectFit: \"none\" },\n  \"object-scale-down\": { objectFit: \"scale-down\" },\n  \"overflow-auto\": { overflow: \"auto\" },\n  \"overflow-hidden\": { overflow: \"hidden\" },\n  \"overflow-clip\": { overflow: \"clip\" },\n  \"overflow-visible\": { overflow: \"visible\" },\n  \"overflow-scroll\": { overflow: \"scroll\" },\n  \"overflow-x-auto\": { overflowX: \"auto\" },\n  \"overflow-y-auto\": { overflowY: \"auto\" },\n  \"overflow-x-hidden\": { overflowX: \"hidden\" },\n  \"overflow-y-hidden\": { overflowY: \"hidden\" },\n  \"overflow-x-clip\": { overflowX: \"clip\" },\n  \"overflow-y-clip\": { overflowY: \"clip\" },\n  \"overflow-x-visible\": { overflowX: \"visible\" },\n  \"overflow-y-visible\": { overflowY: \"visible\" },\n  \"overflow-x-scroll\": { overflowX: \"scroll\" },\n  \"overflow-y-scroll\": { overflowY: \"scroll\" },\n  static: { position: \"static\" },\n  fixed: { position: \"fixed\" },\n  absolute: { position: \"absolute\" },\n  relative: { position: \"relative\" },\n  // Flexbox\n  \"flex-row\": { flexDirection: \"row\" },\n  \"flex-row-reverse\": { flexDirection: \"row-reverse\" },\n  \"flex-col\": { flexDirection: \"column\" },\n  \"flex-col-reverse\": { flexDirection: \"column-reverse\" },\n  \"flex-wrap\": { flexWrap: \"wrap\" },\n  \"flex-wrap-reverse\": { flexWrap: \"wrap-reverse\" },\n  \"flex-nowrap\": { flexWrap: \"nowrap\" },\n  \"flex-1\": { flex: \"1 1 0%\" },\n  \"flex-auto\": { flex: \"1 1 auto\" },\n  \"flex-initial\": { flex: \"0 1 auto\" },\n  \"flex-none\": { flex: \"none\" },\n  grow: { flexGrow: 1 },\n  \"grow-0\": { flexGrow: 0 },\n  shrink: { flexShrink: 1 },\n  \"shrink-0\": { flexShrink: 0 },\n  \"justify-start\": { justifyContent: \"flex-start\" },\n  \"justify-end\": { justifyContent: \"flex-end\" },\n  \"justify-center\": { justifyContent: \"center\" },\n  \"justify-between\": { justifyContent: \"space-between\" },\n  \"justify-around\": { justifyContent: \"space-around\" },\n  \"justify-evenly\": { justifyContent: \"space-evenly\" },\n  \"content-start\": { alignContent: \"flex-start\" },\n  \"content-end\": { alignContent: \"flex-end\" },\n  \"content-center\": { alignContent: \"center\" },\n  \"content-between\": { alignContent: \"space-between\" },\n  \"content-around\": { alignContent: \"space-around\" },\n  \"content-evenly\": { alignContent: \"space-evenly\" },\n  \"items-start\": { alignItems: \"flex-start\" },\n  \"items-end\": { alignItems: \"flex-end\" },\n  \"items-center\": { alignItems: \"center\" },\n  \"items-baseline\": { alignItems: \"baseline\" },\n  \"items-stretch\": { alignItems: \"stretch\" },\n  \"self-auto\": { alignSelf: \"auto\" },\n  \"self-start\": { alignSelf: \"flex-start\" },\n  \"self-end\": { alignSelf: \"flex-end\" },\n  \"self-center\": { alignSelf: \"center\" },\n  \"self-baseline\": { alignSelf: \"baseline\" },\n  \"self-stretch\": { alignSelf: \"stretch\" },\n  // Typography\n  italic: { fontStyle: \"italic\" },\n  \"not-italic\": { fontStyle: \"normal\" },\n  \"text-left\": { textAlign: \"left\" },\n  \"text-center\": { textAlign: \"center\" },\n  \"text-right\": { textAlign: \"right\" },\n  \"text-justify\": { textAlign: \"justify\" },\n  underline: { textDecoration: \"underline\" },\n  overline: { textDecoration: \"overline\" },\n  \"decoration-solid\": { textDecorationStyle: \"solid\" },\n  \"decoration-double\": { textDecorationStyle: \"double\" },\n  \"decoration-dotted\": { textDecorationStyle: \"dotted\" },\n  \"decoration-dashed\": { textDecorationStyle: \"dashed\" },\n  \"decoration-wavy\": { textDecorationStyle: \"wavy\" },\n  \"line-through\": { textDecoration: \"line-through\" },\n  \"no-underline\": { textDecoration: \"none\" },\n  uppercase: { textTransform: \"uppercase\" },\n  lowercase: { textTransform: \"lowercase\" },\n  capitalize: { textTransform: \"capitalize\" },\n  \"normal-case\": { textTransform: \"none\" },\n  truncate: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n  },\n  \"text-ellipsis\": { textOverflow: \"ellipsis\" },\n  \"text-clip\": { textOverflow: \"clip\" },\n  // Backgrounds\n  \"bg-inherit\": { backgroundColor: \"inherit\" },\n  \"bg-current\": { backgroundColor: \"currentColor\" },\n  \"bg-transparent\": { backgroundColor: \"transparent\" },\n  // Borders\n  \"border-solid\": { borderStyle: \"solid\" },\n  \"border-dashed\": { borderStyle: \"dashed\" },\n  \"border-dotted\": { borderStyle: \"dotted\" },\n  \"border-double\": { borderStyle: \"double\" },\n  \"border-hidden\": { borderStyle: \"hidden\" },\n  \"border-none\": { borderStyle: \"none\" },\n};\n\nconst utilityPatterns: Record<string, string | [string, string | string[]]> = {\n  // Layout\n  object: \"objectPosition\",\n  top: \"top\",\n  right: \"right\",\n  bottom: \"bottom\",\n  left: \"left\",\n  z: \"zIndex\",\n  // Flexbox\n  basis: \"flexBasis\",\n  flex: \"flex\",\n  gap: \"gap\",\n  \"gap-x\": [\"gap\", \"columnGap\"],\n  \"gap-y\": [\"gap\", \"rowGap\"],\n  grow: \"flexGrow\",\n  shrink: \"flexShrink\",\n  order: \"order\",\n  // Spacing\n  m: \"margin\",\n  mx: [\"margin\", [\"marginLeft\", \"marginRight\"]],\n  my: [\"margin\", [\"marginTop\", \"marginBottom\"]],\n  ml: [\"margin\", \"marginLeft\"],\n  mr: [\"margin\", \"marginRight\"],\n  mt: [\"margin\", \"marginTop\"],\n  mb: [\"margin\", \"marginBottom\"],\n  p: \"padding\",\n  px: [\"padding\", [\"paddingLeft\", \"paddingRight\"]],\n  py: [\"padding\", [\"paddingTop\", \"paddingBottom\"]],\n  pl: [\"padding\", \"paddingLeft\"],\n  pr: [\"padding\", \"paddingRight\"],\n  pt: [\"padding\", \"paddingTop\"],\n  pb: [\"padding\", \"paddingBottom\"],\n  // Sizing\n  w: \"width\",\n  \"min-w\": \"minWidth\",\n  \"max-w\": \"maxWidth\",\n  h: \"height\",\n  \"min-h\": \"minHeight\",\n  \"max-h\": \"maxHeight\",\n  // Typography\n  leading: \"lineHeight\",\n  tracking: \"letterSpacing\",\n  indent: \"textIndent\",\n  // Backgrounds\n  bg: \"backgroundColor\",\n  // Borders\n  rounded: \"borderRadius\",\n  // Effects\n  opacity: \"opacity\",\n  // Transforms\n  origin: \"transformOrigin\",\n};\n\nconst negativeProperties = [\n  \"zIndex\",\n  \"top\",\n  \"right\",\n  \"bottom\",\n  \"left\",\n  \"translate\",\n  \"scale\",\n  \"rotate\",\n  \"order\",\n  \"margin\",\n];\n\ninterface Value {\n  value: string | number;\n  type?: \"color\" | \"unit\" | \"numeric\" | \"other\";\n  isCustom?: boolean;\n  additionalProperties?: StyleSheet;\n}\n\ntype Config = Omit<TailwindConfig, \"content\">;\n\nfunction createTw(config?: Config) {\n  const { theme } = resolveConfig({\n    // Disable Tailwind content warning\n    content: [\"./dummy/path.js\"],\n    theme: config.theme ?? {},\n  });\n\n  const cache: Record<string, StyleSheet> = {};\n\n  function transformValue(\n    value: string | number,\n    property?: string,\n    isNegative?: boolean\n  ): string | number {\n    const sign = isNegative ? -1 : 1;\n\n    if (typeof value === \"number\") {\n      return sign * value;\n    }\n\n    switch (property) {\n      case \"lineHeight\":\n        // react-pdf only supports unitless line-heights\n        // https://github.com/diegomura/react-pdf/issues/912\n        if (value.endsWith(\"rem\")) {\n          return sign * Number(value.replace(\"rem\", \"\"));\n        }\n        return sign * Number(value);\n\n      default:\n        if (value.endsWith(\"px\")) {\n          return px(sign * Number(value.replace(\"px\", \"\")));\n        }\n        if (value.endsWith(\"rem\")) {\n          return rem(sign * Number(value.replace(\"rem\", \"\")));\n        }\n        if (value.endsWith(\"em\")) {\n          return rem(sign * Number(value.replace(\"em\", \"\")));\n        }\n        if (isNegative && negativeProperties.includes(property)) {\n          const suffix = [\"deg\", \"%\"].find((i) => value.endsWith(i));\n          if (suffix) {\n            return `${sign * Number(value.replace(suffix, \"\"))}${suffix}`;\n          }\n        }\n        if (isNumeric(value)) {\n          return sign * Number(value);\n        }\n        return value;\n    }\n  }\n\n  function getCustomValue(value: string) {\n    if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\n      return value.slice(1, value.length - 1).replaceAll(\"_\", \" \");\n    }\n    return null;\n  }\n\n  function parseValue(\n    value: string,\n    property?: string,\n    isNegative?: boolean\n  ): Value {\n    const valueParts = value.split(\"-\");\n\n    // Custom value\n    const customValue = getCustomValue(value);\n    if (customValue) {\n      // Color\n      if (\n        [\"#\", \"rgb\", \"hsl\"].some((prefix) => customValue.startsWith(prefix))\n      ) {\n        return {\n          value: customValue,\n          type: \"color\",\n          isCustom: true,\n        };\n      }\n      // Unit\n      if ([\"px\", \"rem\"].some((suffix) => customValue.endsWith(suffix))) {\n        return {\n          value: transformValue(customValue, property, isNegative),\n          type: \"unit\",\n          isCustom: true,\n        };\n      }\n      // Other\n      return {\n        value: transformValue(customValue, property, isNegative),\n        type: \"other\",\n        isCustom: true,\n      };\n    }\n\n    // Color\n    // Exception for font-weight: black (not a color)\n    if (valueParts[0] in theme.colors && property !== \"fontWeight\") {\n      // TODO alpha colors like gray-500/50 etc\n      const color = (theme.colors as any)[valueParts[0]];\n      return {\n        value: typeof color === \"string\" ? color : color?.[valueParts[1]],\n        type: \"color\",\n      };\n    }\n\n    // Unit\n    const scaleName = [\"top\", \"right\", \"bottom\", \"left\"].includes(property)\n      ? \"inset\"\n      : property;\n    const config = (theme as any)[scaleName];\n    if (valueParts.length === 0 || !config) {\n      return { value: null };\n    }\n    const result = (\n      typeof config === \"function\"\n        ? config({ theme })?.[value]\n        : config?.[value]\n    ) as [string, StyleSheet] | string;\n\n    if (!result) {\n      return { value: null };\n    }\n\n    if (Array.isArray(result)) {\n      const additionalProperties =\n        result[1] && result[1] !== null && typeof result[1] === \"object\"\n          ? Object.fromEntries(\n              Object.entries(result[1]).map(([key, value]) => [\n                key,\n                transformValue(value, key),\n              ])\n            )\n          : null;\n\n      return {\n        value: transformValue(result[0], property, isNegative),\n        ...(additionalProperties ? { additionalProperties } : null),\n        type: \"unit\",\n      };\n    }\n\n    return {\n      value: transformValue(result, property, isNegative),\n      type: \"unit\",\n    };\n  }\n\n  function parseUtility(className: string): any {\n    const modifierParts = className.split(\":\");\n    const modifiers = modifierParts.slice(0, modifierParts.length - 1);\n    const utilityStr = modifierParts[modifierParts.length - 1];\n\n    if (utilityStr in exactUtilities) {\n      return exactUtilities[utilityStr];\n    }\n\n    const isNegative = utilityStr.startsWith(\"-\");\n    const utilityParts = utilityStr.slice(isNegative ? 1 : 0).split(\"-\");\n\n    for (let key in utilityPatterns) {\n      // Key can have multiple parts (eg. min-w)\n      const keyParts = key.split(\"-\");\n      const comparisonKey = utilityParts.slice(0, keyParts.length).join(\"-\");\n      if (key === comparisonKey) {\n        const rawValue = className.split(`${key}-`)[1];\n        const pattern = utilityPatterns[key];\n        const property = Array.isArray(pattern) ? pattern[0] : pattern;\n        const mappedProperties = Array.isArray(pattern)\n          ? Array.isArray(pattern[1])\n            ? pattern[1]\n            : [pattern[1]]\n          : [pattern];\n\n        if (isNegative && !negativeProperties.includes(property)) {\n          return null;\n        }\n\n        const { value, additionalProperties } = parseValue(\n          rawValue,\n          property,\n          isNegative\n        );\n        if (value === null) {\n          continue;\n        }\n\n        return {\n          ...Object.fromEntries(mappedProperties.map((prop) => [prop, value])),\n          ...(additionalProperties ?? null),\n        };\n      }\n    }\n\n    switch (utilityParts[0]) {\n      case \"inset\": {\n        const direction = [\"x\", \"y\"].find((i) => i === utilityParts[1]);\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\n        const { value } = parseValue(valueStr, \"inset\", isNegative);\n        switch (direction) {\n          case \"x\":\n            return {\n              left: value,\n              right: value,\n            };\n          case \"y\":\n            return {\n              top: value,\n              bottom: value,\n            };\n          default:\n            return {\n              top: value,\n              right: value,\n              bottom: value,\n              left: value,\n            };\n        }\n      }\n\n      case \"font\": {\n        const valueStr = utilityParts.slice(1).join(\"-\");\n        const customValue = getCustomValue(valueStr);\n        if (customValue) {\n          if (isNumeric(customValue)) {\n            return {\n              fontWeight: parseInt(customValue),\n            };\n          }\n          return {\n            fontFamily: customValue,\n          };\n        }\n        if (valueStr in theme.fontFamily) {\n          const { value } = parseValue(valueStr, \"fontFamily\");\n          return {\n            fontFamily: value,\n          };\n        }\n        const { value } = parseValue(valueStr, \"fontWeight\");\n        return {\n          fontWeight: value,\n        };\n      }\n\n      case \"text\": {\n        const valueStr = utilityParts.slice(1).join(\"-\");\n        const { value, additionalProperties, type } = parseValue(\n          valueStr,\n          \"fontSize\"\n        );\n        if (type === \"color\") {\n          return { color: value };\n        }\n        return { fontSize: value, ...additionalProperties };\n      }\n\n      case \"decoration\": {\n        const valueStr = utilityParts.slice(1).join(\"-\");\n        const { value, type } = parseValue(valueStr, \"textDecorationColor\");\n        if (type === \"color\") {\n          return {\n            textDecorationColor: value,\n          };\n        }\n        // Only decoration color (not thickness) supported for now\n        return null;\n      }\n\n      case \"rounded\": {\n        const direction = [\"t\", \"r\", \"b\", \"l\", \"tl\", \"tr\", \"br\", \"bl\"].find(\n          (i) => i === utilityParts[1]\n        );\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\n        const { value } = parseValue(valueStr || \"DEFAULT\", \"borderRadius\");\n        switch (direction) {\n          case \"t\":\n            return {\n              borderTopLeftRadius: value,\n              borderTopRightRadius: value,\n            };\n          case \"r\":\n            return {\n              borderTopRightRadius: value,\n              borderBottomRightRadius: value,\n            };\n          case \"b\":\n            return {\n              borderBottomRightRadius: value,\n              borderBottomLeftRadius: value,\n            };\n          case \"l\":\n            return {\n              borderBottomLeftRadius: value,\n              borderTopLeftRadius: value,\n            };\n          case \"tl\":\n            return {\n              borderTopLeftRadius: value,\n            };\n          case \"tr\":\n            return {\n              borderTopRightRadius: value,\n            };\n          case \"br\":\n            return {\n              borderBottomRightRadius: value,\n            };\n          case \"bl\":\n            return {\n              borderBottomLeftRadius: value,\n            };\n          default:\n            return {\n              borderRadius: value,\n            };\n        }\n      }\n\n      case \"border\": {\n        // Border width or color\n        const direction = [\"x\", \"y\", \"t\", \"r\", \"b\", \"l\"].find(\n          (i) => i === utilityParts[1]\n        );\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\n        const { value, type } = parseValue(\n          valueStr || \"DEFAULT\",\n          \"borderWidth\"\n        );\n        const propertySuffix = capitalize(type === \"color\" ? \"color\" : \"width\");\n        switch (direction) {\n          case \"x\":\n            return {\n              [`borderLeft${propertySuffix}`]: value,\n              [`borderRight${propertySuffix}`]: value,\n            };\n          case \"y\":\n            return {\n              [`borderTop${propertySuffix}`]: value,\n              [`borderBottom${propertySuffix}`]: value,\n            };\n          case \"t\":\n            return { [`borderTop${propertySuffix}`]: value };\n          case \"r\":\n            return { [`borderRight${propertySuffix}`]: value };\n          case \"b\":\n            return { [`borderBottom${propertySuffix}`]: value };\n          case \"l\":\n            return { [`borderLeft${propertySuffix}`]: value };\n          default:\n            return {\n              [`border${propertySuffix}`]: value,\n            };\n        }\n      }\n\n      case \"scale\": {\n        const direction = [\"x\", \"y\"].find((i) => i === utilityParts[1]);\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\n        const { value } = parseValue(valueStr, \"scale\", isNegative);\n        switch (direction) {\n          case \"x\":\n            return {\n              transform: `scaleX(${value})`,\n            };\n          case \"y\":\n            return {\n              transform: `scaleY(${value})`,\n            };\n          default:\n            return {\n              transform: `scale(${value})`,\n            };\n        }\n      }\n\n      case \"rotate\": {\n        const { value } = parseValue(\n          utilityParts.slice(1).join(\"-\"),\n          \"rotate\",\n          isNegative\n        );\n        return {\n          transform: `rotate(${value})`,\n        };\n      }\n\n      case \"translate\": {\n        const direction = [\"x\", \"y\"].find((i) => i === utilityParts[1]);\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\n        const { value } = parseValue(valueStr, \"translate\", isNegative);\n        switch (direction) {\n          case \"x\":\n            return {\n              transform: `translateX(${value})`,\n            };\n          case \"y\":\n            return {\n              transform: `translateY(${value})`,\n            };\n          default:\n            return {\n              transform: `translate(${value})`,\n            };\n        }\n      }\n    }\n\n    return null;\n  }\n\n  return function (input: string) {\n    const classNames = input.split(\" \").map((i) => i.trim());\n    return classNames\n      .map((c) => {\n        if (c in cache) {\n          return cache[c];\n        }\n        const parsed = parseUtility(c);\n        if (parsed) {\n          cache[c] = parsed;\n          return parsed;\n        }\n        return null;\n      })\n      .filter((i) => i)\n      .reduce((acc, val) => {\n        const { transform, ...rest } = val;\n        return {\n          ...acc,\n          ...(transform\n            ? { transform: [acc.transform ?? \"\", transform].join(\" \").trim() }\n            : null),\n          ...rest,\n        };\n      }, {}) as StyleSheet;\n  };\n}\n\nexport { createTw };\n"],"names":["_a","config","value"],"mappings":"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"}