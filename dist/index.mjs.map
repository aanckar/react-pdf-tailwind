{"version":3,"file":"index.mjs","sources":["../src/utils.ts","../src/properties.ts","../src/index.ts"],"sourcesContent":["const PT_PER_PX = 1;\nconst PT_PER_REM = 12;\n\nexport function round(value: number) {\n  return Math.round(value * 1e6) / 1e6;\n}\n\nexport function isNumeric(value: string) {\n  if (value.startsWith(\".\")) {\n    value = `0${value}`;\n  }\n  return Number(value).toString() === value;\n}\n\nexport function capitalize(string: string) {\n  return `${string.charAt(0).toUpperCase()}${string.slice(1).toLowerCase()}`;\n}\n\nexport function rem(value: number) {\n  return round(PT_PER_REM * value);\n}\n\nexport function px(value: number) {\n  return round(PT_PER_PX * value);\n}\n","import { Style } from \"@react-pdf/types\";\n\nconst negativeProperties = [\n  \"zIndex\",\n  \"top\",\n  \"right\",\n  \"bottom\",\n  \"left\",\n  \"translate\",\n  \"scale\",\n  \"rotate\",\n  \"order\",\n  \"margin\",\n] as const;\n\nexport function isNegativeProperty(\n  key: unknown\n): key is typeof negativeProperties[number] {\n  return typeof key === \"string\" && negativeProperties.includes(key as any);\n}\n\nconst scaledProperties = [\n  \"borderRadius\",\n  \"borderWidth\",\n  \"flexBasis\",\n  \"fontFamily\",\n  \"fontSize\",\n  \"fontWeight\",\n  \"gap\",\n  \"height\",\n  \"inset\",\n  \"letterSpacing\",\n  \"lineHeight\",\n  \"margin\",\n  \"maxHeight\",\n  \"maxWidth\",\n  \"minHeight\",\n  \"minWidth\",\n  \"objectPosition\",\n  \"opacity\",\n  \"order\",\n  \"padding\",\n  \"rotate\",\n  \"scale\",\n  \"textIndent\",\n  \"transformOrigin\",\n  \"translate\",\n  \"width\",\n  \"zIndex\",\n] as const;\n\nexport type ScaledProperty = typeof scaledProperties[number];\n\nexport function isScaledProperty(key: unknown): key is ScaledProperty {\n  return typeof key === \"string\" && scaledProperties.includes(key as any);\n}\n\nexport const exactUtilities: Record<string, Style> = {\n  // Layout\n  flex: { display: \"flex\" },\n  hidden: { display: \"none\" },\n  \"object-contain\": { objectFit: \"contain\" },\n  \"object-cover\": { objectFit: \"cover\" },\n  \"object-fill\": { objectFit: \"fill\" },\n  \"object-none\": { objectFit: \"none\" },\n  \"object-scale-down\": { objectFit: \"scale-down\" },\n  \"overflow-hidden\": { overflow: \"hidden\" },\n  absolute: { position: \"absolute\" },\n  relative: { position: \"relative\" },\n  // Flexbox\n  \"flex-row\": { flexDirection: \"row\" },\n  \"flex-row-reverse\": { flexDirection: \"row-reverse\" },\n  \"flex-col\": { flexDirection: \"column\" },\n  \"flex-col-reverse\": { flexDirection: \"column-reverse\" },\n  \"flex-wrap\": { flexWrap: \"wrap\" },\n  \"flex-wrap-reverse\": { flexWrap: \"wrap-reverse\" },\n  \"flex-nowrap\": { flexWrap: \"nowrap\" },\n  \"flex-1\": { flex: \"1 1 0%\" },\n  \"flex-auto\": { flex: \"1 1 auto\" },\n  \"flex-initial\": { flex: \"0 1 auto\" },\n  \"flex-none\": { flex: \"none\" },\n  grow: { flexGrow: 1 },\n  \"grow-0\": { flexGrow: 0 },\n  shrink: { flexShrink: 1 },\n  \"shrink-0\": { flexShrink: 0 },\n  \"justify-start\": { justifyContent: \"flex-start\" },\n  \"justify-end\": { justifyContent: \"flex-end\" },\n  \"justify-center\": { justifyContent: \"center\" },\n  \"justify-between\": { justifyContent: \"space-between\" },\n  \"justify-around\": { justifyContent: \"space-around\" },\n  \"justify-evenly\": { justifyContent: \"space-evenly\" },\n  \"content-start\": { alignContent: \"flex-start\" },\n  \"content-end\": { alignContent: \"flex-end\" },\n  \"content-center\": { alignContent: \"center\" },\n  \"content-between\": { alignContent: \"space-between\" },\n  \"content-around\": { alignContent: \"space-around\" },\n  \"items-start\": { alignItems: \"flex-start\" },\n  \"items-end\": { alignItems: \"flex-end\" },\n  \"items-center\": { alignItems: \"center\" },\n  \"items-baseline\": { alignItems: \"baseline\" },\n  \"items-stretch\": { alignItems: \"stretch\" },\n  \"self-auto\": { alignSelf: \"auto\" },\n  \"self-start\": { alignSelf: \"flex-start\" },\n  \"self-end\": { alignSelf: \"flex-end\" },\n  \"self-center\": { alignSelf: \"center\" },\n  \"self-baseline\": { alignSelf: \"baseline\" },\n  \"self-stretch\": { alignSelf: \"stretch\" },\n  // Typography\n  italic: { fontStyle: \"italic\" },\n  \"not-italic\": { fontStyle: \"normal\" },\n  \"text-left\": { textAlign: \"left\" },\n  \"text-center\": { textAlign: \"center\" },\n  \"text-right\": { textAlign: \"right\" },\n  \"text-justify\": { textAlign: \"justify\" },\n  underline: { textDecoration: \"underline\" },\n  \"decoration-solid\": { textDecorationStyle: \"solid\" },\n  \"decoration-double\": { textDecorationStyle: \"double\" },\n  \"decoration-dotted\": { textDecorationStyle: \"dotted\" },\n  \"decoration-dashed\": { textDecorationStyle: \"dashed\" },\n  \"decoration-wavy\": { textDecorationStyle: \"wavy\" },\n  \"line-through\": { textDecoration: \"line-through\" },\n  \"no-underline\": { textDecoration: \"none\" },\n  uppercase: { textTransform: \"uppercase\" },\n  lowercase: { textTransform: \"lowercase\" },\n  capitalize: { textTransform: \"capitalize\" },\n  truncate: {\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n  },\n  \"text-ellipsis\": { textOverflow: \"ellipsis\" },\n  // Backgrounds\n  \"bg-inherit\": { backgroundColor: \"inherit\" },\n  \"bg-current\": { backgroundColor: \"currentColor\" },\n  \"bg-transparent\": { backgroundColor: \"transparent\" },\n  // Borders\n  \"border-solid\": { borderStyle: \"solid\" },\n  \"border-dashed\": { borderStyle: \"dashed\" },\n  \"border-dotted\": { borderStyle: \"dotted\" },\n};\n\nexport const utilityPatterns: Record<\n  string,\n  string | [string, string | string[]]\n> = {\n  // Layout\n  object: \"objectPosition\",\n  top: \"top\",\n  right: \"right\",\n  bottom: \"bottom\",\n  left: \"left\",\n  z: \"zIndex\",\n  // Flexbox\n  basis: \"flexBasis\",\n  flex: \"flex\",\n  \"gap-x\": [\"gap\", \"columnGap\"],\n  \"gap-y\": [\"gap\", \"rowGap\"],\n  gap: \"gap\",\n  grow: \"flexGrow\",\n  shrink: \"flexShrink\",\n  order: \"order\",\n  // Spacing\n  m: \"margin\",\n  mx: [\"margin\", [\"marginLeft\", \"marginRight\"]],\n  my: [\"margin\", [\"marginTop\", \"marginBottom\"]],\n  ml: [\"margin\", \"marginLeft\"],\n  mr: [\"margin\", \"marginRight\"],\n  mt: [\"margin\", \"marginTop\"],\n  mb: [\"margin\", \"marginBottom\"],\n  p: \"padding\",\n  px: [\"padding\", [\"paddingLeft\", \"paddingRight\"]],\n  py: [\"padding\", [\"paddingTop\", \"paddingBottom\"]],\n  pl: [\"padding\", \"paddingLeft\"],\n  pr: [\"padding\", \"paddingRight\"],\n  pt: [\"padding\", \"paddingTop\"],\n  pb: [\"padding\", \"paddingBottom\"],\n  // Sizing\n  w: \"width\",\n  \"min-w\": \"minWidth\",\n  \"max-w\": \"maxWidth\",\n  h: \"height\",\n  \"min-h\": \"minHeight\",\n  \"max-h\": \"maxHeight\",\n  // Typography\n  leading: \"lineHeight\",\n  tracking: \"letterSpacing\",\n  indent: \"textIndent\",\n  // Backgrounds\n  bg: \"backgroundColor\",\n  // Effects\n  opacity: \"opacity\",\n  // Transforms\n  origin: \"transformOrigin\",\n};\n","import resolveConfig from \"tailwindcss/resolveConfig\";\r\nimport type { Config as TailwindConfig } from \"tailwindcss\";\r\nimport type { Style } from \"@react-pdf/types\";\r\nimport { capitalize, isNumeric, px, rem } from \"./utils\";\r\nimport {\r\n  type ScaledProperty,\r\n  isNegativeProperty,\r\n  isScaledProperty,\r\n  exactUtilities,\r\n  utilityPatterns,\r\n} from \"./properties\";\r\n\r\nexport type Theme = Record<\r\n  ScaledProperty,\r\n  Record<string, string | [string, Style] | undefined>\r\n> & {\r\n  colors: Record<\r\n    string,\r\n    Record<string, string | undefined> | string | undefined\r\n  >;\r\n};\r\n\r\ntype Config = Omit<TailwindConfig, \"content\">;\r\n\r\ninterface ResolvedConfig {\r\n  theme: Theme;\r\n}\r\n\r\nexport function createTw(config: Config) {\r\n  // We're using a stricter subset of Tailwind, so we can cast the config to a narrower type\r\n  const resolvedConfig = resolveConfig({\r\n    // Disable Tailwind content warning\r\n    content: [\"./dummy/path.js\"],\r\n    theme: config.theme ?? {},\r\n  }) as unknown as ResolvedConfig;\r\n\r\n  const theme = resolvedConfig.theme;\r\n\r\n  const cache: Record<string, Style> = {};\r\n\r\n  function transformValue(\r\n    value: string | number | undefined,\r\n    property?: string,\r\n    isNegative?: boolean\r\n  ) {\r\n    if (value === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const sign = isNegative ? -1 : 1;\r\n\r\n    if (typeof value === \"number\") {\r\n      return sign * value;\r\n    }\r\n\r\n    switch (property) {\r\n      case \"lineHeight\":\r\n        // react-pdf only supports unitless line-heights\r\n        // https://github.com/diegomura/react-pdf/issues/912\r\n        if (value.endsWith(\"rem\")) {\r\n          return sign * Number(value.replace(\"rem\", \"\"));\r\n        }\r\n        return sign * Number(value);\r\n\r\n      default:\r\n        if (value.endsWith(\"px\")) {\r\n          return px(sign * Number(value.replace(\"px\", \"\")));\r\n        }\r\n        if (value.endsWith(\"rem\")) {\r\n          return rem(sign * Number(value.replace(\"rem\", \"\")));\r\n        }\r\n        if (value.endsWith(\"em\")) {\r\n          return rem(sign * Number(value.replace(\"em\", \"\")));\r\n        }\r\n        if (isNegative && property && isNegativeProperty(property)) {\r\n          const suffix = [\"deg\", \"%\"].find((i) => value.endsWith(i));\r\n          if (suffix) {\r\n            return `${sign * Number(value.replace(suffix, \"\"))}${suffix}`;\r\n          }\r\n        }\r\n        if (isNumeric(value)) {\r\n          return sign * Number(value);\r\n        }\r\n        return value;\r\n    }\r\n  }\r\n\r\n  function getCustomValue(value: string) {\r\n    if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\r\n      return value.slice(1, value.length - 1).replaceAll(\"_\", \" \");\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  interface Value {\r\n    value: string | number | undefined;\r\n    type?: \"color\" | \"unit\" | \"numeric\" | \"other\";\r\n    isCustom?: boolean;\r\n    additionalProperties?: Style;\r\n  }\r\n\r\n  function parseValue(\r\n    value: string,\r\n    property?: string,\r\n    isNegative?: boolean\r\n  ): Value {\r\n    const valueParts = value.split(\"-\");\r\n\r\n    // Custom value\r\n    const customValue = getCustomValue(value);\r\n    if (customValue) {\r\n      // Color\r\n      if (\r\n        [\"#\", \"rgb\", \"hsl\"].some((prefix) => customValue.startsWith(prefix))\r\n      ) {\r\n        return {\r\n          value: customValue,\r\n          type: \"color\",\r\n          isCustom: true,\r\n        };\r\n      }\r\n      // Unit\r\n      if ([\"px\", \"rem\"].some((suffix) => customValue.endsWith(suffix))) {\r\n        return {\r\n          value: transformValue(customValue, property, isNegative),\r\n          type: \"unit\",\r\n          isCustom: true,\r\n        };\r\n      }\r\n      // Other\r\n      return {\r\n        value: transformValue(customValue, property, isNegative),\r\n        type: \"other\",\r\n        isCustom: true,\r\n      };\r\n    }\r\n\r\n    // Color\r\n    // Exception for \"font-weight: black\" (not a color)\r\n    if (valueParts[0] in theme.colors && property !== \"fontWeight\") {\r\n      // TODO alpha colors like gray-500/50 etc\r\n      const color = theme.colors[valueParts[0]];\r\n      return {\r\n        value: typeof color === \"string\" ? color : color?.[valueParts[1]],\r\n        type: \"color\" as const,\r\n        isCustom: false,\r\n        additionalProperties: undefined,\r\n      };\r\n    }\r\n\r\n    if (valueParts.length === 0 || !property) {\r\n      return {\r\n        value: undefined,\r\n      };\r\n    }\r\n\r\n    // Scaled properties\r\n    const maybeScaledProperty = [\"top\", \"right\", \"bottom\", \"left\"].includes(\r\n      property\r\n    )\r\n      ? \"inset\"\r\n      : property;\r\n\r\n    if (isScaledProperty(maybeScaledProperty)) {\r\n      const result = theme[maybeScaledProperty][value];\r\n\r\n      // Some utilities may set multiple properties\r\n      // eg: text-2xl => [\"1.5rem\", { lineHeight: \"2rem\"}]\r\n      if (Array.isArray(result)) {\r\n        const additionalProperties =\r\n          result[1] && result[1] !== null && typeof result[1] === \"object\"\r\n            ? Object.fromEntries(\r\n                Object.entries(result[1]).map(([key, value]) => [\r\n                  key,\r\n                  transformValue(value, key),\r\n                ])\r\n              )\r\n            : null;\r\n\r\n        return {\r\n          value: transformValue(result[0], property, isNegative),\r\n          type: \"unit\",\r\n          isCustom: false,\r\n          ...(additionalProperties ? { additionalProperties } : null),\r\n        };\r\n      }\r\n\r\n      return {\r\n        value: transformValue(result, property, isNegative),\r\n        type: \"unit\",\r\n        isCustom: false,\r\n      };\r\n    }\r\n\r\n    // No match\r\n    return {\r\n      value: undefined,\r\n    };\r\n  }\r\n\r\n  function parseUtility(\r\n    className: string\r\n  ): Style | Record<string, string | number | undefined> | undefined {\r\n    const modifierParts = className.split(\":\");\r\n    const utilityStr = modifierParts[modifierParts.length - 1];\r\n\r\n    // Exact utilities\r\n    if (utilityStr in exactUtilities) {\r\n      return exactUtilities[utilityStr];\r\n    }\r\n\r\n    // Utility patterns\r\n    const isNegative = utilityStr.startsWith(\"-\");\r\n    const utilityParts = utilityStr.slice(isNegative ? 1 : 0).split(\"-\");\r\n\r\n    const matchingUtilityPatternKey = Object.keys(utilityPatterns).find(\r\n      (key) => {\r\n        const keyParts = key.split(\"-\");\r\n        const comparisonKey = utilityParts.slice(0, keyParts.length).join(\"-\");\r\n        return key === comparisonKey;\r\n      }\r\n    );\r\n\r\n    if (matchingUtilityPatternKey) {\r\n      const rawValue = className.split(`${matchingUtilityPatternKey}-`)[1];\r\n      const pattern = utilityPatterns[matchingUtilityPatternKey];\r\n      const property = Array.isArray(pattern) ? pattern[0] : pattern;\r\n      const mappedProperties = Array.isArray(pattern)\r\n        ? Array.isArray(pattern[1])\r\n          ? pattern[1]\r\n          : [pattern[1]]\r\n        : [pattern];\r\n\r\n      if (isNegative && !isNegativeProperty(property)) {\r\n        return undefined;\r\n      }\r\n\r\n      const { value, additionalProperties } = parseValue(\r\n        rawValue,\r\n        property,\r\n        isNegative\r\n      );\r\n\r\n      return {\r\n        ...Object.fromEntries(mappedProperties.map((prop) => [prop, value])),\r\n        ...(additionalProperties ?? null),\r\n      };\r\n    }\r\n\r\n    // Special utilities\r\n    switch (utilityParts[0]) {\r\n      case \"inset\": {\r\n        const direction = [\"x\", \"y\"].find((i) => i === utilityParts[1]);\r\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\r\n        const { value } = parseValue(valueStr, \"inset\", isNegative);\r\n        switch (direction) {\r\n          case \"x\":\r\n            return {\r\n              left: value,\r\n              right: value,\r\n            };\r\n          case \"y\":\r\n            return {\r\n              top: value,\r\n              bottom: value,\r\n            };\r\n          default:\r\n            return {\r\n              top: value,\r\n              right: value,\r\n              bottom: value,\r\n              left: value,\r\n            };\r\n        }\r\n      }\r\n\r\n      case \"font\": {\r\n        const valueStr = utilityParts.slice(1).join(\"-\");\r\n        const customValue = getCustomValue(valueStr);\r\n        if (customValue) {\r\n          if (isNumeric(customValue)) {\r\n            return {\r\n              fontWeight: parseInt(customValue),\r\n            };\r\n          }\r\n          return {\r\n            fontFamily: customValue,\r\n          };\r\n        }\r\n        if (theme.fontFamily && valueStr in theme.fontFamily) {\r\n          const { value } = parseValue(valueStr, \"fontFamily\");\r\n          return {\r\n            fontFamily: value,\r\n          };\r\n        }\r\n        const { value } = parseValue(valueStr, \"fontWeight\");\r\n        return {\r\n          fontWeight: value,\r\n        };\r\n      }\r\n\r\n      case \"text\": {\r\n        const valueStr = utilityParts.slice(1).join(\"-\");\r\n        const { value, additionalProperties, type } = parseValue(\r\n          valueStr,\r\n          \"fontSize\"\r\n        );\r\n        if (type === \"color\") {\r\n          return { color: value };\r\n        }\r\n        return { fontSize: value, ...additionalProperties };\r\n      }\r\n\r\n      case \"decoration\": {\r\n        const valueStr = utilityParts.slice(1).join(\"-\");\r\n        const { value, type } = parseValue(valueStr, \"textDecorationColor\");\r\n        if (type === \"color\") {\r\n          return {\r\n            textDecorationColor: value,\r\n          };\r\n        }\r\n        // Only decoration color (not thickness) supported for now\r\n        return undefined;\r\n      }\r\n\r\n      case \"rounded\": {\r\n        const direction = [\"t\", \"r\", \"b\", \"l\", \"tl\", \"tr\", \"br\", \"bl\"].find(\r\n          (i) => i === utilityParts[1]\r\n        );\r\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\r\n        // console.log(\"get real val\");\r\n        const { value } = parseValue(valueStr || \"DEFAULT\", \"borderRadius\");\r\n        switch (direction) {\r\n          case \"t\":\r\n            return {\r\n              borderTopLeftRadius: value,\r\n              borderTopRightRadius: value,\r\n            };\r\n          case \"r\":\r\n            return {\r\n              borderTopRightRadius: value,\r\n              borderBottomRightRadius: value,\r\n            };\r\n          case \"b\":\r\n            return {\r\n              borderBottomRightRadius: value,\r\n              borderBottomLeftRadius: value,\r\n            };\r\n          case \"l\":\r\n            return {\r\n              borderBottomLeftRadius: value,\r\n              borderTopLeftRadius: value,\r\n            };\r\n          case \"tl\":\r\n            return {\r\n              borderTopLeftRadius: value,\r\n            };\r\n          case \"tr\":\r\n            return {\r\n              borderTopRightRadius: value,\r\n            };\r\n          case \"br\":\r\n            return {\r\n              borderBottomRightRadius: value,\r\n            };\r\n          case \"bl\":\r\n            return {\r\n              borderBottomLeftRadius: value,\r\n            };\r\n          default:\r\n            return {\r\n              borderRadius: value,\r\n            };\r\n        }\r\n      }\r\n\r\n      case \"border\": {\r\n        // Border width or color\r\n        const direction = [\"x\", \"y\", \"t\", \"r\", \"b\", \"l\"].find(\r\n          (i) => i === utilityParts[1]\r\n        );\r\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\r\n        const { value, type } = parseValue(\r\n          valueStr || \"DEFAULT\",\r\n          \"borderWidth\"\r\n        );\r\n        const propertySuffix = capitalize(type === \"color\" ? \"color\" : \"width\");\r\n        switch (direction) {\r\n          case \"x\":\r\n            return {\r\n              [`borderLeft${propertySuffix}`]: value,\r\n              [`borderRight${propertySuffix}`]: value,\r\n            };\r\n          case \"y\":\r\n            return {\r\n              [`borderTop${propertySuffix}`]: value,\r\n              [`borderBottom${propertySuffix}`]: value,\r\n            };\r\n          case \"t\":\r\n            return { [`borderTop${propertySuffix}`]: value };\r\n          case \"r\":\r\n            return { [`borderRight${propertySuffix}`]: value };\r\n          case \"b\":\r\n            return { [`borderBottom${propertySuffix}`]: value };\r\n          case \"l\":\r\n            return { [`borderLeft${propertySuffix}`]: value };\r\n          default:\r\n            return {\r\n              [`border${propertySuffix}`]: value,\r\n            };\r\n        }\r\n      }\r\n\r\n      case \"scale\": {\r\n        const direction = [\"x\", \"y\"].find((i) => i === utilityParts[1]);\r\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\r\n        const { value } = parseValue(valueStr, \"scale\", isNegative);\r\n        switch (direction) {\r\n          case \"x\":\r\n            return {\r\n              transform: `scaleX(${value})`,\r\n            };\r\n          case \"y\":\r\n            return {\r\n              transform: `scaleY(${value})`,\r\n            };\r\n          default:\r\n            return {\r\n              transform: `scale(${value})`,\r\n            };\r\n        }\r\n      }\r\n\r\n      case \"rotate\": {\r\n        const { value } = parseValue(\r\n          utilityParts.slice(1).join(\"-\"),\r\n          \"rotate\",\r\n          isNegative\r\n        );\r\n        return {\r\n          transform: `rotate(${value})`,\r\n        };\r\n      }\r\n\r\n      case \"translate\": {\r\n        const direction = [\"x\", \"y\"].find((i) => i === utilityParts[1]);\r\n        const valueStr = utilityParts.slice(direction ? 2 : 1).join(\"-\");\r\n        const { value } = parseValue(valueStr, \"translate\", isNegative);\r\n        switch (direction) {\r\n          case \"x\":\r\n            return {\r\n              transform: `translateX(${value})`,\r\n            };\r\n          case \"y\":\r\n            return {\r\n              transform: `translateY(${value})`,\r\n            };\r\n          default:\r\n            return {\r\n              transform: `translate(${value})`,\r\n            };\r\n        }\r\n      }\r\n    }\r\n\r\n    // No match\r\n    return undefined;\r\n  }\r\n\r\n  function handleInvalidClassName(className: string) {\r\n    console.warn(`Invalid class: \"${className}\"`);\r\n  }\r\n\r\n  return function (input: string) {\r\n    const classNames = input.split(\" \").map((i) => i.trim());\r\n    return classNames\r\n      .map((className) => {\r\n        if (className in cache) {\r\n          return cache[className];\r\n        }\r\n        const parsed = parseUtility(className);\r\n        if (\r\n          parsed &&\r\n          Object.values(parsed).every((v) => typeof v !== \"undefined\")\r\n        ) {\r\n          cache[className] = parsed;\r\n          return parsed;\r\n        } else {\r\n          handleInvalidClassName(className);\r\n        }\r\n        return undefined;\r\n      })\r\n      .reduce<Style>((acc, val) => {\r\n        if (!val) {\r\n          return acc;\r\n        }\r\n        if (\"transform\" in val) {\r\n          const { transform, ...rest } = val;\r\n          return {\r\n            ...acc,\r\n            ...(transform\r\n              ? { transform: [acc.transform ?? \"\", transform].join(\" \").trim() }\r\n              : null),\r\n            ...rest,\r\n          };\r\n        }\r\n        return { ...acc, ...val };\r\n      }, {});\r\n  };\r\n}\r\n"],"names":["value","_a"],"mappings":"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"}